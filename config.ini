[Resume]
# If a previous run is resumed, most that run's configs will be loaded
# except for the "Termination" and "Rendering" settings, which read from here.
continue_previous_run = off
prev_run = 2017.09.23.22.22

[Board]
  # Bounds: dimensions of the board as "(Verticle, Horizontal)"
  # simult_parts: the number of particles to be simulated simultaneously
  bounds = (256, 512)
  simult_parts = 2000

[Termination]
  # time is in seconds. Do math here like 60*60*1 for hours.
  # when determining when to terminate, agg includes the starting aggregate.
  # terminate_condition options are "time", "agg", or "frames"
  max_time = 60*60*11
  max_agg = 10000
  max_frames = 100000
  terminate_condition = frames

[Rendering]
  # dot_sidelength_in_pixels multiplies with "bounds" to get image resolution
  # animate sets whether to use pyplot's FuncAnimation to animate the process
  # interval is the milliseconds between frames when animating
  # cmap is R,G,B values (from 0 to 1) for the background, particles, and agg
  # cbound determines the boundaries between colours when rendering.
  frames_to_snag = (1000 * i for i in count(1))
  dot_sidelength_in_pixels = 1
  animate = off
  interval = 8
  cmap = [[0.15,0.15,0.15], [0.7,0.3,0], [1,0.1,0]]
  cbound = [0,1,2,2]


[Movement]
  # These are considered to be adjacent to a particle when moving.
  # Coords are relative to the top-left corner eg "(y+1, x+1)" = down and right
  # If you want to bias the movement enter duplicates
  movement_options = [
                      (y + 1, x),
                      (y - 1, x),
                      (y, x + 1),
                      (y, x - 1),
                      (y, x + 1),
                      (y, x - 1),
                      #(y, x),
                      #(y + 1, x + 1),
                      #(y + 1, x - 1),
                      #(y - 1, x + 1),
                      #(y - 1, x - 1),
                     ]

[Aggregate]
  # Properties pertaining to how particles are added to the aggregate (agg.)
  # On sticky = False, particles join the agg. only when they move into it
  # On True they add whenever adjacent (as defined by movement_options, above)
  # self_aggregate allows two particles that collide to form a new agg seed
  sticky = True
  self_aggregate = False

[Squares]
  # Spawnsquares are the squares that can produce particles
  # Use values from the [Cardinals] section here, remember you can make custom cardinals
  # Starting_agg is any initial seed aggregate particles you want to start with
  # Starting_parts are any particles you want to be present at simulation start
  # You can combine two cardinals with the "|" operator. e.g. "left | right"
  spawnsquares = center4
  starting_agg = ellipse
  starting_parts = middle_line

[Cardinals]
  # You can put your own Python set comprehensions here if you like.
  # Use "%(var)s" to refer to other cardinals
  # These values are accepted by things in the [Squares] section.
  top = {(0, x) for x in range(bounds[1])}
  bottom = {(bounds[0]-1, x) for x in range(bounds[1])}
  left = {(y, 0) for y in range(bounds[0])}
  right = {(y, bounds[1]-1) for y  in range(bounds[0])}
  edges = %(top)s | %(bottom)s | %(left)s | %(right)s
  everywhere = {(y, x) for y in range(bounds[0]) for x in range(bounds[1])}
  empty = set()
  center4 = {(y, x) for y in (int(bounds[0]/2)-1, int(bounds[0]/2))
                    for x in (int(bounds[1]/2)-1, int(bounds[1]/2))}
  ellipse =  {(int(bounds[0]/2*(0.999 + math.sin(6.28/10000 * i))), 
               int(bounds[1]/2*(0.999 + math.cos(6.28/10000 * i)))) for i in range(10000)}
  custom = {(32*i, j) for i in range(1,bounds[0]/32) for j in range(0, bounds[1], 8)}
  middle_line = {(int(bounds[0]/2), x) for x in range(bounds[1])}

[Random]
  randomseed = 42
